#	$FreeBSD: src/etc/pf.conf,v 1.2.2.1 2006/04/04 20:31:20 mlaier Exp $
#	$OpenBSD: pf.conf,v 1.21 2003/09/02 20:38:44 david Exp $
#
# See pf.conf(5) and /usr/share/examples/pf for syntax and examples.
# Required order: options, normalization, queueing, translation, filtering.
# Macros and tables may be defined and used anywhere.
# Note that translation rules are first match while filter rules are last match.

# Macros: define common values, so they can be referenced and changed easily.
#ext_if="ext0"	# replace with actual external interface name i.e., dc0
#int_if="int0"	# replace with actual internal interface name i.e., dc1
#internal_net="10.1.1.1/8"
#external_addr="192.168.1.1"

# Tables: similar to macros, but more flexible for many addresses.
#table <foo> { 10.0.0.0/8, !10.1.0.0/16, 192.168.0.0/24, 192.168.1.18 }

# Options: tune the behavior of pf, default values are given.
#set timeout { interval 10, frag 30 }
#set timeout { tcp.first 120, tcp.opening 30, tcp.established 86400 }
#set timeout { tcp.closing 900, tcp.finwait 45, tcp.closed 90 }
#set timeout { udp.first 60, udp.single 30, udp.multiple 60 }
#set timeout { icmp.first 20, icmp.error 10 }
#set timeout { other.first 60, other.single 30, other.multiple 60 }
#set timeout { adaptive.start 0, adaptive.end 0 }
#set limit { states 10000, frags 5000 }
#set loginterface none
#set optimization normal
#set block-policy drop
#set require-order yes
#set fingerprints "/etc/pf.os"

# Normalization: reassemble fragments and resolve or reduce traffic ambiguities.
#scrub in all

# Queueing: rule-based bandwidth control.
#altq on $ext_if bandwidth 2Mb cbq queue { dflt, developers, marketing }
#queue dflt bandwidth 5% cbq(default)
#queue developers bandwidth 80%
#queue marketing  bandwidth 15%

# Translation: specify how addresses are to be mapped or redirected.
# nat: packets going out through $ext_if with source address $internal_net will
# get translated as coming from the address of $ext_if, a state is created for
# such packets, and incoming packets will be redirected to the internal address.
#nat on $ext_if from $internal_net to any -> ($ext_if)

# rdr: packets coming in on $ext_if with destination $external_addr:1234 will
# be redirected to 10.1.1.1:5678. A state is created for such packets, and
# outgoing packets will be translated as coming from the external address.
#rdr on $ext_if proto tcp from any to $external_addr/32 port 1234 -> 10.1.1.1 port 5678

# rdr outgoing FTP requests to the ftp-proxy
#rdr on $int_if proto tcp from any to any port ftp -> 127.0.0.1 port 8021

# spamd-setup puts addresses to be redirected into table <spamd>.
#table <spamd> persist
#no rdr on { lo0, lo1 } from any to any
#rdr inet proto tcp from <spamd> to any port smtp -> 127.0.0.1 port 8025

# Filtering: the implicit first two rules are
#pass in all
#pass out all

# block all incoming packets but allow ssh, pass all outgoing tcp and udp
# connections and keep state, logging blocked packets.
#block in log all
#pass  in  on $ext_if proto tcp from any to $ext_if port 22 keep state
#pass  out on $ext_if proto { tcp, udp } all keep state

# pass incoming packets destined to the addresses given in table <foo>.
#pass in on $ext_if proto { tcp, udp } from any to <foo> port 80 keep state

# pass incoming ports for ftp-proxy
#pass in on $ext_if inet proto tcp from any to $ext_if port > 49151 keep state

# Alternate rule to pass incoming ports for ftp-proxy
# NOTE: Please see pf.conf(5) BUGS section before using user/group rules.
#pass in on $ext_if inet proto tcp from any to $ext_if user proxy keep state

# assign packets to a queue.
#pass out on $ext_if from 192.168.0.0/24 to any keep state queue developers
#pass out on $ext_if from 192.168.1.0/24 to any keep state queue marketing

#Packet Filter {PF}防火牆特性為 Default Pass ALL、Last Match Rules 當撰寫適合自已的 pf.conf 時記得 pf.conf 語法順序如下

#巨集 Macro：包含 IP 位址、介面名稱等自定變數
#表格 Tables：包含 IP 位址列表的表格
#選項 Options：各種控制 PF 運作的選項
#清理 Traffic Normalization：正規化與重組分段封包等再處理
#佇列 Queueing：提供頻寬控制與封包優先順序
#轉譯 Translation：控制網路位址轉譯與封包轉向
#過濾規則 Packet Filtering：當封包通過任何網路介面時，允許選擇性的過濾或阻擋封包 

# -------------------- 先定義基本巨集
ext_if = "ste0" # 連往外部的介面
#int_if = "rl1" # 連往內部網路的介面

# 定義內部網路區段，這些是絕不應該出現在連外介面 $ext_if 的
priv_nets = "{ 127.0.0.0/8, 192.168.0.0/16, 172.16.0.0/12, 10.0.0.0/8 }"

# 定義可信任的區段
my_nets = "{ 140.119.176.160 }"
ncu_nets = "{ 140.115.50.36, 140.115.50.28, 140.115.50.10 }"
nccu_nets = "{ 140.119.164.66 , 140.119.164.0/24 }" 
adsl_nets = "{ 61.59.56.21 }"
ares_nets = "{ 61.219.200.162 }"

# -------------------- 再定義要開放的服務
# 這邊是我們要開放給網際網路的服務。我們有架 Apache，所以要開 HTTP
# 至於 113 則是 IDENT，一些服務如 IRC、台灣部份 BBS 會用到
tcp_services = "{ http, smtp , 20 , 21 ,imap , 137 , 138 , 139 , 445}"
udp_services = "{ 137 , 138 , 139 }"

# 下面這些是只打算開放給內部使用的服務
# 4001、4080 均是 MLDonkey 的控制介面
priv_tcp_services = "{ ssh  }"
# 允許的 ICMP 類型（主要為 ping、tracert 等工具）
icmp_types = "echoreq"

# -------------------- 設定選項
# 好國民要用這個設定，狠心人就別用 return 改成 drop 吧
set block-policy drop
# 只記錄 $ext_if 的東西
set loginterface $ext_if
# -------------------- Normalization 動作
# 基本動作，把所有封包弄整齊
scrub in all

# -------------------- 位址轉譯 (NAT) 部份
# 做 NAT
#nat on $ext_if from $int_if:network to any -> ($ext_if)
# 這個重新導向是給 ftp-proxy 用的
#rdr on $int_if proto tcp from any to any port ftp -> 127.0.0.1 port 8021

# -------------------- 封包過濾規則
# 開始過濾封包，一開始先全擋
#pass all
# loopback 上的東西基本上都要允許
pass quick on lo0 all
# 把對外介面上絕對不應該出現的 IP 擋掉，避免偽造 IP 來源
block drop in quick on $ext_if from $priv_nets to any
block drop out quick on $ext_if from any to $priv_nets

table <sshguard> persist 
#table <sshguard> persist #file "/var/db/bruteforce"
block in log quick on $ext_if from <sshguard> label "ssh bruteforce"

#table <sshguard> persist file 
#block in quick on $ext_if from <sshguard> label "ssh bruteforce"

# 開啟要提供給外面的人用的服務
pass in on $ext_if  proto tcp from any to ($ext_if) port $tcp_services flags S/SA keep state

#pass in on $ext_if proto tcp from any to ($ext_if) port { ssh } flags S/SA keep state (max-src-conn-rate 3/10 , overload <ssh> flush global) 
#十秒內超過三次
#1. 首先 pass 對外進來的流量
#2. 記錄連結 port {ftp ssh} 10秒內3次 (max-src-conn-rate 指定時間內允許連結次數)
##3. 若有符合這樣條件的 IP 就將該 IP 加入 Table <ssh> 內
#4. block 該 Table <ssh> 內列表的 IP 

# 開啟供內部網路用的服務
#pass in on $int_if inet proto tcp from any to ($int_if) port $priv_tcp_services flags S/SA keep state
# 讓 ICMP 資料通過
pass in inet proto icmp all icmp-type $icmp_types keep state

# 很鬆的規則，假定內部網路使用者都是好人。這個以後再鎖緊
#pass in on $int_if from $int_if:network to any keep state
#pass out on $int_if from any to $int_if:network keep state

# 讓對外介面的資料出的去
pass out on $ext_if proto tcp all modulate state flags S/SA
pass out on $ext_if proto { udp, icmp } all keep state

# 可信任區段
pass quick on $ext_if from $ncu_nets to any keep state
pass quick on $ext_if from $nccu_nets to any keep state
pass quick on $ext_if from $adsl_nets to any keep state
pass quick on $ext_if from $ares_nets to any keep state

block drop in quick on $ext_if proto tcp from any to any port $udp_services 
block drop in quick on $ext_if proto udp from any to any port $udp_services 
pass quick on $ext_if from $my_nets to any keep state
